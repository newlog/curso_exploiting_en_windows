1. Execute Cain and open exploit. The exploit correctly executes calc.exe

2. Set windows 8.1 to use DEP in OptOut mode:
    - bcdedit.exe /set nx OptOut     & restart VM

3. Execute Cain and open exploit. Cain crashes! Fine!

4. Open Cain with Immunity and generate ROP payloads:
    - !mona rop

==== [[[[ BAD FROM HERE ]]]]

5. Add virtual_alloc rop chain to exploit and fill payload with "ABCDE..." [xpl-dep-1.py]
    [*] Remember that we had to push a readable address onto stack.
        The rop chain will have to be modified to start with some 
        "pop reg" to erase that address (the first rop_chain inst can be doubled).
    - xpl: [junk (8206)] + [rop_chain] + [read_addr] + [payload]

6. Execute exploit step by step with Immunity. Analize ROP (add breakpoint to first ROP address: 0x005C9BCA).
    [*] We jump to payload, but some garbage is written!! 
        We'll have jump that garbage to reach payload.
        What is that garbage? The bytes of those garbage instructions are the same
        that the address we have used as readable addres: 00 41 B4 7D

    [*] And if we analyze the ROP chain, we can see that the NOPs before the garbage
        are from the ROP chain! Value of EAX.

7. We will modify the ROP chain to change the last NOPs (stored in EAX) for a JMP 0x08. [xpl-dep-2.py]
   Enough distance to jump "garbage".
    - $ rasm2 -a x86 "jmp 0x8"       ==> EB06
    - Change NOPs (0x90909090) for 0x909006EB
    - Change payload for 0xCCCCCCCC 
    Debug with Immunity Debugger

=====

8. Change payload for the previous one (exec/calc). [xpl-dep-3.py] 
